import streamlit as st
import pandas as pd
import pdfplumber
import os
import re
from io import BytesIO
from datetime import datetime
from PIL import Image

# Load logo
logo = Image.open('assets/logo.png')

# C·∫•u h√¨nh trang v·ªõi logo
st.set_page_config(
    page_title="IVC - PDF to Excel Converter",
    page_icon=logo,
    layout="wide"
)

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng v·ªõi logo
col1, col2 = st.columns([1, 4])
with col1:
    st.image(logo, width=100)
with col2:
    st.title("Chuy·ªÉn ƒë·ªïi C12 -TB BHXH - PDF sang Excel")
st.markdown("---")

# C√°c h√†m x·ª≠ l√Ω t·ª´ file g·ªëc
def extract_month_from_text(text):
    match = re.search(r'Th√°ng (\d+) nƒÉm (\d+)', text)
    if match:
        return f"{match.group(1)}/{match.group(2)}"
    return ""

def create_filter_value(stt, cur_level1):
    if not stt or not str(stt).strip():
        return "", cur_level1
    
    stt = str(stt).strip()
    main_sections = ['A', 'B', 'C', 'D', 'ƒê']
    
    if stt in main_sections:
        cur_level1 = stt
        return stt, cur_level1
    
    if cur_level1:
        return f"{cur_level1}_{stt}", cur_level1
        
    return stt, cur_level1

def process_pdf_files(uploaded_files):
    all_companies = []
    all_tables = []
    
    # Hi·ªÉn th·ªã progress bar
    progress_bar = st.progress(0)
    progress_text = st.empty()
    
    for i, uploaded_file in enumerate(uploaded_files):
        try:
            # ƒê·ªçc file PDF
            bytes_data = uploaded_file.read()
            
            with pdfplumber.open(BytesIO(bytes_data)) as pdf:
                # X·ª≠ l√Ω th√¥ng tin c√¥ng ty
                page = pdf.pages[0]
                text = page.extract_text()
                month = extract_month_from_text(text)
                
                company_data = {
                    'Th√°ng': [month],
                    'T√™n c√¥ng ty': [''],
                    'M√£ ƒë∆°n v·ªã': [''],
                    'ƒêi·ªán tho·∫°i': ['']
                }
                
                lines = text.split('\n')
                for line in lines:
                    if 'K√≠nh g·ª≠i:' in line:
                        company_data['T√™n c√¥ng ty'][0] = line.replace('K√≠nh g·ª≠i:', '').strip()
                    elif 'M√£ ƒë∆°n v·ªã:' in line:
                        company_data['M√£ ƒë∆°n v·ªã'][0] = line.split('M√£ ƒë∆°n v·ªã:')[1].split('ƒêi·ªán')[0].strip()
                    elif 'ƒêi·ªán tho·∫°i:' in line:
                        company_data['ƒêi·ªán tho·∫°i'][0] = line.split('ƒêi·ªán tho·∫°i:')[1].strip()
                
                company_df = pd.DataFrame(company_data)
                all_companies.append(company_df)
                
                # X·ª≠ l√Ω b·∫£ng d·ªØ li·ªáu
                table_data = []
                cur_level1 = None
                
                for page_num in range(len(pdf.pages)):
                    page = pdf.pages[page_num]
                    tables = page.extract_tables()
                    
                    if tables:
                        main_table = tables[0]
                        for row in main_table:
                            if row and len(row) >= 8:
                                if any(cell and cell.strip() and '===' not in str(cell) for cell in row):
                                    filter_value, cur_level1 = create_filter_value(row[0], cur_level1)
                                    formatted_row = {
                                        'Th√°ng': month,
                                        'Filter': filter_value,
                                        'STT': row[0],
                                        'N·ªôi dung': row[1],
                                        'BHXH_OD_TS': row[2],
                                        'BHXH_HTTT': row[3],
                                        'BHYT': row[4],
                                        'BHTN': row[5],
                                        'BHTNLD_BNN': row[6],
                                        'C·ªông': row[7]
                                    }
                                    table_data.append(formatted_row)
                
                if table_data:
                    columns_order = ['Th√°ng', 'Filter', 'STT', 'N·ªôi dung', 'BHXH_OD_TS', 
                                   'BHXH_HTTT', 'BHYT', 'BHTN', 'BHTNLD_BNN', 'C·ªông']
                    table_df = pd.DataFrame(table_data, columns=columns_order)
                    all_tables.append(table_df)
            
            # C·∫≠p nh·∫≠t progress
            progress = (i + 1) / len(uploaded_files)
            progress_bar.progress(progress)
            progress_text.text(f'ƒêang x·ª≠ l√Ω: {uploaded_file.name}')
            
        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω file {uploaded_file.name}: {str(e)}")
    
    # X√≥a progress bar v√† text
    progress_bar.empty()
    progress_text.empty()
    
    if all_companies and all_tables:
        # G·ªôp v√† s·∫Øp x·∫øp d·ªØ li·ªáu
        combined_companies = pd.concat(all_companies, ignore_index=True)
        combined_tables = pd.concat(all_tables, ignore_index=True)
        
        # S·∫Øp x·∫øp theo th√°ng
        combined_companies['Sort_Date'] = pd.to_datetime(combined_companies['Th√°ng'].str.split('/').str[0] + '/01/' + 
                                                       combined_companies['Th√°ng'].str.split('/').str[1])
        combined_tables['Sort_Date'] = pd.to_datetime(combined_tables['Th√°ng'].str.split('/').str[0] + '/01/' + 
                                                    combined_tables['Th√°ng'].str.split('/').str[1])
        
        combined_companies = combined_companies.sort_values('Sort_Date').drop('Sort_Date', axis=1)
        combined_tables = combined_tables.sort_values('Sort_Date').drop('Sort_Date', axis=1)
        
        # T·∫°o c√°c sheet ph·ª•
        ps_trong_ky = combined_tables[combined_tables['Filter'] == 'B'].copy()
        sl_lao_dong = combined_tables[combined_tables['Filter'] == 'ƒê_1'].copy()
        
        return combined_companies, combined_tables, ps_trong_ky, sl_lao_dong
    
    return None, None, None, None

# Giao di·ªán upload files
uploaded_files = st.file_uploader("Ch·ªçn c√°c file PDF c·∫ßn x·ª≠ l√Ω", 
                                type=['pdf'], 
                                accept_multiple_files=True)

if uploaded_files:
    if st.button("X·ª≠ l√Ω"):
        with st.spinner('ƒêang x·ª≠ l√Ω...'):
            # X·ª≠ l√Ω files
            company_df, table_df, ps_trong_ky, sl_lao_dong = process_pdf_files(uploaded_files)
            
            if company_df is not None:
                # T·∫°o Excel file trong memory
                output = BytesIO()
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    company_df.to_excel(writer, sheet_name='Thong tin cong ty', index=False)
                    table_df.to_excel(writer, sheet_name='Bang du lieu', index=False)
                    ps_trong_ky.to_excel(writer, sheet_name='PS trong ky', index=False)
                    sl_lao_dong.to_excel(writer, sheet_name='SL lao dong', index=False)
                
                # T·∫°o t√™n file v·ªõi timestamp
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                output_filename = f"ketqua_tong_hop_{timestamp}.xlsx"
                
                # Download button
                st.success("‚úÖ X·ª≠ l√Ω th√†nh c√¥ng!")
                st.download_button(
                    label="üì• T·∫£i file Excel",
                    data=output.getvalue(),
                    file_name=output_filename,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
                
                # Hi·ªÉn th·ªã preview d·ªØ li·ªáu
                with st.expander("Xem tr∆∞·ªõc d·ªØ li·ªáu"):
                    st.subheader("Th√¥ng tin c√¥ng ty")
                    st.dataframe(company_df)
                    
                    st.subheader("B·∫£ng d·ªØ li·ªáu")
                    st.dataframe(table_df)
                    
                    st.subheader("PS trong k·ª≥")
                    st.dataframe(ps_trong_ky)
                    
                    st.subheader("SL lao ƒë·ªông")
                    st.dataframe(sl_lao_dong)
            else:
                st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ x·ª≠ l√Ω")

# Th√™m th√¥ng tin footer
st.markdown("---")
st.markdown("Made with ‚ù§Ô∏è by IVC Audit PDH") 